<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ADMSysAdminLogHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ADMSysAdminLogHelper
{
            
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CheckReasonDialogConfig</Name>
				<Source><![CDATA[
    public static int CheckReasonDialogConfig()
    {
        var configShowReasonDialog = ADMConfigs::getConfigValue(ADMConfigsConstants::configNameShowReasonDialog);

        return str2IntOk(configShowReasonDialog) ? str2Int(configShowReasonDialog) : ADMConfigsConstants::defaultValueReasonDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckExpiryDateDialog</Name>
				<Source><![CDATA[
    public static int CheckExpiryDateDialog()
    {
        var configShowExpiryDialog = ADMConfigs::getConfigValue(ADMConfigsConstants::configNameShowExpiryDateDialog);

        return str2IntOk(configShowExpiryDialog) ? str2Int(configShowExpiryDialog) : ADMConfigsConstants::defaultValueExipryDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckTelemetrySysAdminRole</Name>
				<Source><![CDATA[
    public static int CheckTelemetrySysAdminRole()
    {
        var configTelemetrySysAdminRole = ADMConfigs::getConfigValue(ADMConfigsConstants::configNameTelemetrySysAdminRole);

        return str2IntOk(configTelemetrySysAdminRole) ? str2Int(configTelemetrySysAdminRole) : ADMConfigsConstants::defaultValueTelemetrySysAdminRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultNumDaysForReports</Name>
				<Source><![CDATA[
    public static int GetDefaultNumDaysForReports()
    {
        int reportOffset = -ADMConfigsConstants::defaultValueReportOffset;
        var configDefaultNumberOfDays = ADMConfigs::getConfigValue(ADMConfigsConstants::configNameDefaultNumDays);

        if (str2IntOk(configDefaultNumberOfDays))
        {
            reportOffset = str2Int(configDefaultNumberOfDays) * -1;
        }

        return reportOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultNumHoursRoleExpiry</Name>
				<Source><![CDATA[
    public static int GetDefaultNumHoursRoleExpiry()
    {
        var configDefaultRoleExpiryHours = ADMConfigs::getConfigValue(ADMConfigsConstants::configNameRoleDefaultExpiryHours);

        return str2IntOk(configDefaultRoleExpiryHours) ? str2Int(configDefaultRoleExpiryHours) : ADMConfigsConstants::defaultValueRoleExpiryHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserRoleAssignmentAsExpired</Name>
				<Source><![CDATA[
    public static void setUserRoleAssignmentAsExpired(UserId _userId)
    {
        ADMSysAdminLog sysAdminLog;

        update_recordset sysAdminLog
            setting HasExpired = NoYes::Yes
            where sysAdminLog.UserId_       == _userId
            &&    sysAdminLog.EndDateTime   != DateTimeUtil::minValue()
            &&    sysAdminLog.HasExpired    == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTelemetryAssignedExpiredRevoked</Name>
				<Source><![CDATA[
    public static void sendTelemetryAssignedExpiredRevoked(
        str             _id, 
        str             _name, 
        ADMSysAdminLog  _sysAdminLog)
    {
        SysApplicationInsightsTelemetryLogger::instance().trackEvent(
            SysApplicationInsightsEventTelemetry::newFromEventIdName(_id, _name)
            .addProperty(ADMApplicationInsightsSysAdminUserIdProperty::newFromValue(_sysAdminLog.UserId_))
            .addProperty(ADMApplicationInsightsSysAdminReasonProperty::newFromValue(_sysAdminLog.Reason))
            .addProperty(ADMApplicationInsightsSysAdminFromDateTimeProperty::newFromValue(DateTimeUtil::toStr(_sysAdminLog.CreatedDateTime)))
            .addProperty(ADMApplicationInsightsSysAdminToDateTimeProperty::newFromValue(DateTimeUtil::toStr(_sysAdminLog.EndDateTime))));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>